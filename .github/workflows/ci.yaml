---
name: CI/CD
on:
  workflow_call:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
#        python-version: ["3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        if: ${{ always() && hashFiles('setup.py') }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          sudo apt-get update && sudo apt-get install gettext

      - name: Get pip cache dir
        if: ${{ always() && hashFiles('setup.py') }}
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> "$GITHUB_OUTPUT"

      - name: Set Python version's file variable
        run: |
          RAW_PY_ENV="py${{ matrix.python-version }}"
          echo "PY_ENV=${RAW_PY_ENV//./}" >> "$GITHUB_ENV"

#      - name: Cache Python dependencies ${{ matrix.python-version }} (dev)
#        uses: actions/cache@v4.3.0
#        if: ${{ always() && hashFiles('setup.py') }}
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/${{ env.PY_ENV }}-dev.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-${{ matrix.python-version }}

      - name: Install Python dependencies ${{ matrix.python-version }} (dev)
        if: ${{ always() && hashFiles('setup.py') }}
        run: >-
          python -m pip install --upgrade --no-deps
          -r https://raw.githubusercontent.com/DLRSP/requirements/main/${{ env.PY_ENV }}-dev.txt

      - name: Run tox targets for ${{ matrix.python-version }}
        if: ${{ always() && hashFiles('tox.ini') }}
        run: tox --py current

#      - name: Install Python dependencies ${{ matrix.python-version }} (cov)
#        if: ${{ always() && hashFiles('setup.py') }}
#        run: |
#          python -m pip install --upgrade coverage codecov

#      - name: Upload coverage
#        if: ${{ always() && hashFiles('tox.ini') }}
#        run: |
#          coverage combine
#          codecov

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5.5.1
        if: ${{ always() && hashFiles('tox.ini') }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    needs: test
    permissions:
      actions: read
      contents: read
      checks: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    steps:
    - uses: actions/checkout@v5

    - uses: actions/setup-python@v6
      with:
        python-version: "3.x"

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> "$GITHUB_OUTPUT"

    - uses: actions/cache@v4.3.0
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install OS dependencies
      run: |
        sudo apt-get install -y gettext

    - name: Install Python dependencies
      run: pip install black flake8

    - name: Run linters
      uses: wearerequired/lint-action@v2
      with:
          black: true
          flake8: true
#          stylelint: true
#          eslint: true
#          prettier: true

    - name: Initialize CodeQL
      if: ${{ always() && hashFiles('setup.py') }}
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      if: ${{ always() && hashFiles('setup.py') }}
      uses: github/codeql-action/autobuild@v4

    - name: Perform CodeQL Analysis
      if: ${{ always() && hashFiles('setup.py') }}
      uses: github/codeql-action/analyze@v4

  bots:
    name: BOTs (Dependabot/Pre-Commit-CI) Pull Request Approve and Merge
    runs-on: ubuntu-latest
    needs: [test, analyze]
    permissions:
      contents: write
      pull-requests: write
    # Checking the actor will prevent your Action run failing on non-Dependabot or non-Pre-Commit-CI
    # PRs but also ensures that it only does work for Dependabot PRs and Pre-Commit-CI
    if: (github.actor == 'dependabot[bot]' || github.actor == 'pre-commit-ci[bot]' || github.actor == 'dlrsp-bot') 
        && github.event_name == 'pull_request'
        && github.event.pull_request.draft == false
    steps:
#      - uses: actions/checkout@v5
#        with:
#          token: ${{ secrets.PERSONAL_TOKEN }}
#          fetch-depth: 0
#      - name: Rebase this branch if behind the main
#        run: |
#          if [[ "$(git rev-list --left-only --count \
#                   origin/main...origin/${{ github.event.pull_request.head.sha }} \
#                  )" != 0 ]] ; then
#            echo "This branch is not up to date with main: rebase it!";
#            git pull --rebase
#          fi
#        env:
#          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      # Fail if there's no metadata and so the approval will not occur.
#      - name: Dependabot metadata
#        if: github.actor == 'dependabot[bot]'
#        id: dependabot-metadata
#        uses: dependabot/fetch-metadata@v1.6.0
#        with:
#          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Approve Bot PRs
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      # Sets the PR to allow auto-merging for patch, minor and major updates if all checks pass
      - name: Enable auto-merge for Bot PRs
        # if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' }}
        run: gh pr merge --auto --rebase "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.BOT_PAT }}

  build:
    name: Build wheels
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [test, analyze]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        if: ${{ always() && hashFiles('setup.py') }}
        with:
          python-version: "3.x"

      - name: Install OS dependencies
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          sudo apt-get install -y gettext

      - name: Install Python dependencies
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          python -m pip install --upgrade pip build django

      - name: Build a binary wheel and source tarball with latest python version
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          python -m build --sdist --wheel

      - name: Store the distribution packages
        if: ${{ always() && hashFiles('setup.py') }}
        uses: actions/upload-artifact@v5
        with:
          name: python-package-distributions
          path: dist/

  build-cross:
    name: Build wheels on ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [test, analyze]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        if: ${{ always() && hashFiles('setup.py') }}
        with:
          python-version: "3.x"

#      - name: Install OS dependencies
#        if: ${{ always() && hashFiles('setup.py') }}
#        run: |
#          sudo apt-get install -y gettext

      - name: Install OS dependencies Ubuntu
        if: ${{ always() && hashFiles('setup.py') && matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install -y gettext

      - name: Install OS dependencies MacOS
        if: ${{ always() && hashFiles('setup.py') && matrix.os == 'macos-*' }}
        run: |
          sudo brew install gettext

      - name: Install Python dependencies
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          python -m pip install --upgrade pip setuptools wheel django

      - name: Build a binary wheel and source tarball with latest python version
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          python setup.py sdist bdist_wheel

      - name: Install cibuildwheel
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          python -m pip install cibuildwheel==2.17.0

      - name: Build wheels
        if: ${{ always() && hashFiles('setup.py') }}
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v5
        if: ${{ always() && hashFiles('setup.py') }}
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  release:
    name: GitHub Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [test, analyze, build]
    steps:
      - uses: actions/checkout@v5

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

      - name: Download all the dists
        if: ${{ always() && hashFiles('setup.py') }}
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/

      - name: Update Release
        id: update_release
        uses: softprops/action-gh-release@v2
        if: ${{ always() && hashFiles('setup.py') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          files: |
            ./dist/*.whl
            ./wheelhouse/*.whl

  deploy:
    name: PyPI Deploy
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [test, analyze, build, release]
    steps:
      - uses: actions/checkout@v5

      - name: Download all the dists
        if: ${{ always() && hashFiles('setup.py') }}
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package
        if: ${{ always() && hashFiles('setup.py') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
